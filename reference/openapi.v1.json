{
  "openapi": "3.1.0",
  "info": {
    "title": "Sumeru API",
    "version": "1.0",
    "summary": "The main API of Sumeru. This is what the client will communicate with.",
    "description": "The main API of Sumeru, a self-hosted open source NVR program.",
    "license": {
      "name": "GPL-3.0",
      "identifier": "GPL-3.0-or-later"
    },
    "contact": {
      "name": "Sumeru",
      "url": "https://github.com/SumeruCCTV"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "dev server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "API Information",
        "operationId": "get-api-information",
        "description": "Returns information about the currently running Sumeru instance.",
        "security": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "application": "sumeru",
                      "version": "0.0.1"
                    }
                  },
                  "properties": {
                    "application": {
                      "type": "string",
                      "example": "sumeru",
                      "pattern": "^[A-Za-z]*$",
                      "description": "The name of the application.",
                      "readOnly": true
                    },
                    "version": {
                      "type": "string",
                      "description": "The version of the application. This must always comply with the SemVer specification.",
                      "example": "0.0.1",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "application",
                    "version"
                  ]
                },
                "examples": {
                  "OK": {
                    "value": {
                      "application": "sumeru",
                      "version": "0.0.1"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/health": {
      "get": {
        "summary": "API Health",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "services": [
                        {
                          "name": "db",
                          "status": "healthy"
                        },
                        {
                          "name": "web",
                          "status": "healthy"
                        },
                        {
                          "name": "camera",
                          "status": "healthy"
                        }
                      ],
                      "mem": "17.1 MB"
                    }
                  },
                  "properties": {
                    "services": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "description": "This array contains a list of objects which represent the status of a service.",
                      "items": {
                        "type": "object",
                        "description": "This object represents the status of a service.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Name of the service.",
                            "pattern": "^[A-Za-z]*$",
                            "example": "web",
                            "readOnly": true
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the service.",
                            "example": "healthy",
                            "enum": [
                              "healthy",
                              "unhealthy"
                            ],
                            "readOnly": true
                          }
                        },
                        "required": [
                          "name",
                          "status"
                        ]
                      }
                    },
                    "mem": {
                      "type": "string",
                      "description": "Current amount of memory allocated by the Go runtime.",
                      "example": "17.1 MB",
                      "readOnly": true
                    },
                    "next": {
                      "type": "string",
                      "description": "The target heap size of the next GC cycle as specified by the Go runtime.",
                      "example": "22.1 MB",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "services",
                    "mem",
                    "next"
                  ]
                },
                "examples": {
                  "OK": {
                    "value": {
                      "services": [
                        {
                          "name": "db",
                          "status": "healthy"
                        },
                        {
                          "name": "web",
                          "status": "healthy"
                        },
                        {
                          "name": "camera",
                          "status": "unhealthy"
                        }
                      ],
                      "mem": "13.9 MB",
                      "next": "22.1 MB"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-health",
        "security": [],
        "description": "Returns health data about the currently running Sumeru instance."
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register Account",
        "operationId": "post-auth-register",
        "responses": {
          "201": {
            "description": "The account has been created and the user can now login using the specified credentials."
          },
          "409": {
            "description": "An account with that username already exists."
          }
        },
        "description": "Registers an account in the database. This is an unauthenticated-only request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "./models/account.v1.json"
                  },
                  {
                    "properties": {
                      "captchaKey": {
                        "type": "string",
                        "description": "The captcha key.",
                        "writeOnly": true
                      }
                    },
                    "type": "object",
                    "required": [
                      "captchaKey"
                    ]
                  }
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "username": "Sculas",
                    "passwordHash": "$argon2id$v=19$m=65536,t=1,p=2$rSbj+PXkqb8WSczjV2TI/Q$otzq0VElr6J5Cz3Sii+uhWNn4uK0aT2b4I99sYEEROU",
                    "captchaKey": "<your-captcha-key>"
                  }
                }
              }
            }
          },
          "description": "This body represents a partial account model.\nTo create an account, the user has to specify their username and a client-side Argon2id hashed password."
        },
        "tags": [
          "auth"
        ],
        "security": []
      }
    }
  },
  "components": {
    "schemas": {},
    "securitySchemes": {
      "sumeru_token": {
        "name": "sumeru_token",
        "type": "apiKey",
        "in": "cookie",
        "description": "A HTTPOnly Secure cookie containing the account token."
      }
    }
  },
  "security": [
    {
      "sumeru_token": []
    }
  ]
}